import random
import sqlite3
import string


class CustomerDB:
    def __init__(self):
        self.db_path = "./customers.db"
        self.connection = None

    def connect(self):
        if self.connection is None:
            self.connection = sqlite3.connect(self.db_path)

    def close(self):
        if self.connection:
            self.connection.close()
            self.connection = None

    def create_database(self):
        """
        This function creates an SQLIte database containing 'customers' table with columns:
            - id (int):  Auto-incremented primary key
            - first_name (text): Customer first name
            - last_name (text): Customer last name
            - email (text): Customer email
            - message (text): Randomly generated message associated with the customer.
        """
        self.connect()

        self.connection.execute(
            """
        CREATE TABLE IF NOT EXISTS customers(
            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            first_name TEXT NOT NULL,
            last_name TEXT NOT NULL,
            email TEXT NOT NULL,
            message TEXT NOT NULL)"""
        )

        self.connection.commit()

    @staticmethod
    def generate_random_customer():
        """
        Generates a random customer profile with a first name, last name, email, and a message.

        Returns:
            tuple: A tuple containing:
                - first_name (str): Randomly generated first name (capitalized).
                - last_name (str): Randomly generated last name (capitalized).
                - email (str): Randomly generated email in the format `first_last@example.com`.
                - message (str): Randomly generated message with a maximum length of 256 characters (capitalized).
        """
        domain = "@example.com"
        name_length = random.randint(5, 10)
        message_length = random.randint(1, 256)

        first_name = "".join(
            random.choice(string.ascii_lowercase) for _ in range(name_length)
        )
        last_name = "".join(
            random.choice(string.ascii_lowercase) for _ in range(name_length)
        )
        email = first_name + "_" + last_name + domain
        message = "".join(
            random.choice(string.printable) for _ in range(message_length)
        )
        return (
            first_name.capitalize(),
            last_name.capitalize(),
            email,
            message.capitalize(),
        )

    def insert_customer(self, first_name, last_name, email, message):
        """
        This function inserts customer data generated by generate_random_customer() function
        into customer DB created by create_database() function
        """
        self.connect()
        self.connection.execute(
            """
            INSERT INTO customers (first_name, last_name, email, message)
            VALUES (?,?,?,?)
        """,
            (first_name, last_name, email, message),
        )
        self.connection.commit()

    def count_rows_in_db(self):
        """Calculate the actual number of rows in customer.db database"""
        self.connect()
        cursor = self.connection.cursor()

        cursor.execute("SELECT COUNT(*) FROM customers")
        rows_num = cursor.fetchone()[0]

        return rows_num

    def get_customer_from_db(self):
        """Retrieve a random customer data from customer.db based on the current size of customers.db database"""
        rows_num = self.count_rows_in_db()
        customer_id = random.randint(1, rows_num)

        self.connect()
        cursor = self.connection.cursor()

        cursor.execute(
            f"SELECT first_name, last_name, email, message FROM customers WHERE id = {customer_id}"
        )
        customer_data = cursor.fetchone()

        return customer_data
